from rest_framework import serializers
from .models import Document, ChunkingStrategy, AIModel


class DocumentUploadSerializer(serializers.ModelSerializer):
    """
    Serializer for handling document uploads.
    It expects a 'file' for upload and optional foreign key IDs.
    The 'content' and 'metadata' fields are read-only as they are generated by the backend.
    """


    file = serializers.FileField(write_only=True, help_text="The file to be uploaded (e.g., .txt, .pdf, .docx).")


    chunking_strategie_id = serializers.PrimaryKeyRelatedField(
        queryset=ChunkingStrategy.objects.all(),
        source='chunking_strategie',  # Maps input 'chunking_strategie_id' to model's 'chunking_strategie'
        write_only=True,
        required=False,
        allow_null=True,
        help_text="ID of the ChunkingStrategy to associate with this document (optional)."
    )


    ai_model_id = serializers.PrimaryKeyRelatedField(
        queryset=AIModel.objects.all(),
        source='ai_model',
        write_only=True,
        required=False,
        allow_null=True,
        help_text="ID of the AIModel to associate with this document (optional)."
    )

    class Meta:
        model = Document
        fields = [
            'id',
            'file',
            'chunking_strategie_id',
            'ai_model_id',
            'content',
            'metadata',
            'uploaded_at',
            'modified_at'
        ]

        read_only_fields = ['content', 'metadata', 'uploaded_at', 'modified_at']

